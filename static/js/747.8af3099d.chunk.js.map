{"version":3,"file":"static/js/747.8af3099d.chunk.js","mappings":"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","sources":["utils/match.js","common/ui/MatchesTable/MatchesTable.jsx","common/components/MatchesData.jsx","common/containers/MatchesDataContainer.jsx","common/ui/Breadcrumbs/Breadcrumbs.jsx","pages/LeagueCalendar/LeagueCalendar.jsx","utils/pagination.js"],"sourcesContent":["import {format} from \"date-fns\";\n\nexport const getLocaledMatchStatus = (status, locale) => {\n  if (locale === \"RU\") {\n    switch (status) {\n      case \"SCHEDULED\":\n        return \"Запланирован\";\n      case \"LIVE\":\n        return \"В прямом эфире\";\n      case \"IN_PLAY\":\n        return \"В игре\";\n      case \"FINISHED\":\n        return \"Завершен\";\n      case \"POSTPONED\":\n        return \"Отложен\";\n      case \"SUSPENDED\":\n        return \"Приостановлен\";\n      case \"CANCELED\":\n        return \"Отменен\";\n      default:\n        return status;\n    }\n  }\n};\n\nexport const getFormattedMatchScore = ({fullTime, extraTime, penalties}) => {\n  let score = \"\";\n\n  if (fullTime.homeTeam !== null && fullTime.awayTeam !== null)\n    score += `${fullTime.homeTeam}:${fullTime.awayTeam}`;\n  if (extraTime.homeTeam !== null && extraTime.awayTeam !== null)\n    score += ` (${extraTime.homeTeam}:${extraTime.awayTeam})`;\n  if (penalties.homeTeam !== null && penalties.awayTeam !== null)\n    score += ` (${penalties.homeTeam}:${penalties.awayTeam})`;\n\n  return score;\n};\n\nexport const formatMatchesData = (matches = []) => {\n  return matches.map((m) => ({\n    id: m.id,\n    date: format(new Date(m.utcDate), \"dd.MM.yyyy\"),\n    time: format(new Date(m.utcDate), \"HH:mm\"),\n    status: getLocaledMatchStatus(m.status, \"RU\"),\n    commandA: m.homeTeam.name,\n    commandB: m.awayTeam.name,\n    score: getFormattedMatchScore(m.score),\n  }));\n};\n","import PropTypes from \"prop-types\";\nimport {\n  Paper,\n  Skeleton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n} from \"@mui/material\";\nimport React from \"react\";\n\nconst MatchesTable = ({matches = [], isFetching = false, skeletonsAmount = 1}) => {\n  // Creating skeletons\n  const skeletons = [];\n  for (let index = 0; index < skeletonsAmount; index++) {\n    skeletons.push(\n      <TableRow key={index}>\n        <TableCell>\n          <Skeleton />\n        </TableCell>\n        <TableCell>\n          <Skeleton />\n        </TableCell>\n        <TableCell>\n          <Skeleton />\n        </TableCell>\n        <TableCell align=\"right\">\n          <Skeleton />\n        </TableCell>\n        <TableCell align=\"center\">-</TableCell>\n        <TableCell>\n          <Skeleton />\n        </TableCell>\n        <TableCell align=\"right\">\n          <Skeleton />\n        </TableCell>\n      </TableRow>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper} elevation={3} sx={{mb: \"30px\"}}>\n      <Table>\n        <TableBody>\n          {isFetching\n            ? skeletons\n            : matches.map((m) => (\n                <TableRow key={m.id}>\n                  <TableCell>{m.date}</TableCell>\n                  <TableCell>{m.time}</TableCell>\n                  <TableCell>{m.status}</TableCell>\n                  <TableCell align=\"right\">{m.commandA}</TableCell>\n                  <TableCell align=\"center\">-</TableCell>\n                  <TableCell>{m.commandB}</TableCell>\n                  <TableCell align=\"right\">{m.score}</TableCell>\n                </TableRow>\n              ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nMatchesTable.propTypes = {\n  matches: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      date: PropTypes.string,\n      time: PropTypes.string,\n      status: PropTypes.string,\n      commandA: PropTypes.string,\n      commandB: PropTypes.string,\n      score: PropTypes.string,\n    })\n  ),\n  isFetching: PropTypes.bool,\n  skeletonsAmount: PropTypes.number,\n};\n\nexport default MatchesTable;\n","import PropTypes from \"prop-types\";\nimport {DatePicker} from \"@mui/lab\";\nimport {TextField, Typography, Pagination} from \"@mui/material\";\nimport {Box} from \"@mui/system\";\nimport {add} from \"date-fns\";\nimport React from \"react\";\nimport MatchesTable from \"../ui/MatchesTable/MatchesTable\";\n\nconst MatchesData = ({\n  isFetching = false,\n  error,\n  matches = [],\n  currentMatches = [],\n  filters = {},\n  matchesPerPage,\n  currentPage = 1,\n  onPageChanged,\n  onFilterChanged,\n}) => {\n  const pageCount = Math.ceil(matches.length / matchesPerPage);\n\n  return (\n    <>\n      <Box sx={{display: \"flex\", alignItems: \"center\", mb: \"30px\"}}>\n        <Typography sx={{mr: \"20px\"}}>с</Typography>\n        <DatePicker\n          label=\"Дата\"\n          mask={\"__.__.____\"}\n          value={filters.dateFrom}\n          onChange={(value) => onFilterChanged(value, \"dateFrom\")}\n          renderInput={(params) => <TextField {...params} sx={{mr: \"20px\"}} />}\n          maxDate={filters.dateTo && add(new Date(filters.dateTo), {days: -1})}\n          minDate={\n            filters.dateTo &&\n            add(new Date(filters.dateTo), {\n              years: -5,\n              days: 1,\n            })\n          }\n        />\n        <Typography sx={{mr: \"20px\"}}>по</Typography>\n        <DatePicker\n          label=\"Дата\"\n          mask={\"__.__.____\"}\n          value={filters.dateTo}\n          onChange={(value) => onFilterChanged(value, \"dateTo\")}\n          renderInput={(params) => <TextField {...params} />}\n          minDate={filters.dateFrom && add(new Date(filters.dateFrom), {days: 1})}\n          maxDate={\n            filters.dateFrom &&\n            add(new Date(filters.dateFrom), {\n              years: 5,\n              days: -1,\n            })\n          }\n        />\n      </Box>\n      {error ? (\n        <Typography>Ошибка при получении данных</Typography>\n      ) : !matches.length && !isFetching ? (\n        <Typography>Данные не найдены</Typography>\n      ) : isFetching ? (\n        <MatchesTable isFetching skeletonsAmount={matchesPerPage} />\n      ) : (\n        <MatchesTable matches={currentMatches} />\n      )}\n      {matches.length > matchesPerPage && !error && !isFetching ? (\n        <Pagination\n          onChange={onPageChanged}\n          page={currentPage}\n          count={pageCount}\n          color=\"primary\"\n          sx={{display: \"flex\", justifyContent: \"center\"}}\n        />\n      ) : null}\n    </>\n  );\n};\n\nMatchesData.propTypes = {\n  matches: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      date: PropTypes.string,\n      time: PropTypes.string,\n      status: PropTypes.string,\n      commandA: PropTypes.string,\n      commandB: PropTypes.string,\n      score: PropTypes.string,\n    })\n  ),\n  currentMatches: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      date: PropTypes.string,\n      time: PropTypes.string,\n      status: PropTypes.string,\n      commandA: PropTypes.string,\n      commandB: PropTypes.string,\n      score: PropTypes.string,\n    })\n  ),\n  filters: PropTypes.object,\n  matchesPerPage: PropTypes.number,\n  currentPage: PropTypes.number,\n  error: PropTypes.any,\n  isFetching: PropTypes.bool,\n  onPageChanged: PropTypes.func,\n  onFilterChanged: PropTypes.func,\n};\n\nexport default MatchesData;\n","import PropTypes from \"prop-types\";\nimport {format} from \"date-fns\";\nimport React, {useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {useGetLeagueMatchesQuery} from \"../../api/leaguesApi\";\nimport {useGetTeamMatchesQuery} from \"../../api/teamsApi\";\nimport {formatMatchesData} from \"../../utils/match\";\nimport {getPaginatedArray} from \"../../utils/pagination\";\nimport MatchesTable from \"../components/MatchesData\";\n\nconst MatchesTableContainer = ({queryHookType = \"leagues\", matchesPerPage, ...rest}) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filters, setFilters] = useState({\n    dateFrom: null,\n    dateTo: null,\n  });\n  const {leagueId, teamId} = useParams();\n\n  const getQueryHook = () => {\n    if (queryHookType === \"leagues\") return useGetLeagueMatchesQuery;\n    if (queryHookType === \"team\") return useGetTeamMatchesQuery;\n  };\n\n  // Creating params for api request\n  const getQueryParams = () => {\n    const params = {};\n    if (queryHookType === \"leagues\") params.id = leagueId;\n    if (queryHookType === \"team\") params.id = teamId;\n    if (filters.dateFrom && filters.dateTo) {\n      params.dateFrom = format(filters.dateFrom, \"yyyy-MM-dd\");\n      params.dateTo = format(filters.dateTo, \"yyyy-MM-dd\");\n    }\n    return params;\n  };\n\n  // Fetching api data\n  const {\n    matches = [],\n    error,\n    isFetching,\n  } = getQueryHook()(getQueryParams(), {\n    selectFromResult: ({data, ...rest}) => ({\n      ...rest,\n      matches: formatMatchesData(data?.matches),\n    }),\n  });\n\n  const currentMatches = getPaginatedArray(matches, matchesPerPage, currentPage);\n\n  const onPageChanged = (e, page) => setCurrentPage(page);\n\n  const onFilterChanged = (value, filterName) => {\n    const newFilters = {...filters, [filterName]: value};\n    setFilters(newFilters);\n    if (newFilters.dateFrom && newFilters.dateTo) setCurrentPage(1);\n  };\n\n  return (\n    <MatchesTable\n      error={error}\n      isFetching={isFetching}\n      matches={matches}\n      currentMatches={currentMatches}\n      matchesPerPage={matchesPerPage}\n      filters={filters}\n      currentPage={currentPage}\n      onPageChanged={onPageChanged}\n      onFilterChanged={onFilterChanged}\n      {...rest}\n    />\n  );\n};\n\nMatchesTableContainer.propTypes = {\n  queryHookType: PropTypes.string,\n  matchesPerPage: PropTypes.number,\n};\n\nexport default MatchesTableContainer;\n","import PropTypes from \"prop-types\";\nimport {Breadcrumbs as BreadcrumbsMui, Link, Skeleton, Typography} from \"@mui/material\";\nimport React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Breadcrumbs = ({crumbs = []}) => {\n  return (\n    <BreadcrumbsMui aria-label=\"breadcrumb\">\n      {crumbs.map((c, index) =>\n        c.isLoading ? (\n          <Skeleton sx={{width: \"100px\"}} key={c.href} />\n        ) : crumbs.length - 1 === index ? (\n          <Typography color=\"text.primary\" key={c.href}>\n            {c.name}\n          </Typography>\n        ) : (\n          <Link\n            key={c.href}\n            underline=\"hover\"\n            color=\"inherit\"\n            component={NavLink}\n            to={c.href}\n          >\n            {c.name}\n          </Link>\n        )\n      )}\n    </BreadcrumbsMui>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  crumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      href: PropTypes.string.isRequired,\n      isLoading: PropTypes.bool,\n    })\n  ).isRequired,\n};\n\nexport default Breadcrumbs;\n","import {Container, Typography} from \"@mui/material\";\nimport React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {useGetLeagueMatchesQuery} from \"../../api/leaguesApi\";\nimport MatchesDataContainer from \"../../common/containers/MatchesDataContainer\";\nimport Breadcrumbs from \"../../common/ui/Breadcrumbs/Breadcrumbs\";\n\nconst LeagueCalendar = () => {\n  const {leagueId} = useParams();\n  const {data, error, isLoading} = useGetLeagueMatchesQuery({\n    id: leagueId,\n  });\n\n  const crumbs = [\n    {name: \"Лиги\", href: \"/leagues\"},\n    {\n      name: error ? \"\" : data?.competition.name,\n      href: `/leagues/${leagueId}/league-calendar`,\n      isLoading,\n    },\n  ];\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Breadcrumbs crumbs={crumbs} sx={{mb: \"30px\"}} />\n\n      <Typography variant=\"h3\" component=\"div\" sx={{mb: \"20px\"}}>\n        Матчи\n      </Typography>\n\n      <MatchesDataContainer matchesPerPage={7} />\n    </Container>\n  );\n};\n\nexport default LeagueCalendar;\n","export const getPaginatedArray = (arr = [], itemsPerPage = 10, currentPage = 1) => {\n  const offset = (currentPage - 1) * itemsPerPage;\n  const paginatedItems = arr.slice(offset, offset + itemsPerPage);\n\n  return paginatedItems;\n};\n"],"names":["getLocaledMatchStatus","status","locale","getFormattedMatchScore","fullTime","extraTime","penalties","score","homeTeam","awayTeam","formatMatchesData","matches","map","m","id","date","format","Date","utcDate","time","commandA","name","commandB","isFetching","skeletonsAmount","skeletons","index","push","TableRow","TableCell","Skeleton","align","TableContainer","component","Paper","elevation","sx","mb","Table","TableBody","error","currentMatches","filters","matchesPerPage","currentPage","onPageChanged","onFilterChanged","pageCount","Math","ceil","length","Box","display","alignItems","Typography","mr","DatePicker","label","mask","value","dateFrom","onChange","renderInput","params","TextField","maxDate","dateTo","add","days","minDate","years","Pagination","page","count","color","justifyContent","queryHookType","rest","useState","setCurrentPage","setFilters","useParams","leagueId","teamId","useGetLeagueMatchesQuery","useGetTeamMatchesQuery","getQueryParams","selectFromResult","data","getPaginatedArray","e","filterName","newFilters","crumbs","c","isLoading","width","href","underline","NavLink","to","competition","maxWidth","variant","arr","itemsPerPage","offset","paginatedItems","slice"],"sourceRoot":""}