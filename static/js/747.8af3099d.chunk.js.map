{"version":3,"file":"static/js/747.8af3099d.chunk.js","mappings":"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","sources":["utils/match.js","common/ui/MatchesTable/MatchesTable.jsx","common/components/MatchesData.jsx","common/containers/MatchesDataContainer.jsx","common/ui/Breadcrumbs/Breadcrumbs.jsx","pages/LeagueCalendar/LeagueCalendar.jsx","utils/pagination.js"],"sourcesContent":["import { format } from \"date-fns\";\r\n\r\nexport const getLocaledMatchStatus = (status, locale) => {\r\n    if (locale === \"RU\") {\r\n        switch (status) {\r\n            case \"SCHEDULED\":\r\n                return \"Запланирован\";\r\n            case \"LIVE\":\r\n                return \"В прямом эфире\";\r\n            case \"IN_PLAY\":\r\n                return \"В игре\";\r\n            case \"FINISHED\":\r\n                return \"Завершен\";\r\n            case \"POSTPONED\":\r\n                return \"Отложен\";\r\n            case \"SUSPENDED\":\r\n                return \"Приостановлен\";\r\n            case \"CANCELED\":\r\n                return \"Отменен\";\r\n            default:\r\n                return status;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getFormattedMatchScore = ({ fullTime, extraTime, penalties }) => {\r\n    let score = \"\";\r\n\r\n    if (fullTime.homeTeam !== null && fullTime.awayTeam !== null)\r\n        score += `${fullTime.homeTeam}:${fullTime.awayTeam}`;\r\n    if (extraTime.homeTeam !== null && extraTime.awayTeam !== null)\r\n        score += ` (${extraTime.homeTeam}:${extraTime.awayTeam})`;\r\n    if (penalties.homeTeam !== null && penalties.awayTeam !== null)\r\n        score += ` (${penalties.homeTeam}:${penalties.awayTeam})`;\r\n\r\n    return score;\r\n};\r\n\r\nexport const formatMatchesData = (matches = []) => {\r\n    return matches.map((m) => ({\r\n        id: m.id,\r\n        date: format(new Date(m.utcDate), \"dd.MM.yyyy\"),\r\n        time: format(new Date(m.utcDate), \"HH:mm\"),\r\n        status: getLocaledMatchStatus(m.status, \"RU\"),\r\n        commandA: m.homeTeam.name,\r\n        commandB: m.awayTeam.name,\r\n        score: getFormattedMatchScore(m.score),\r\n    }));\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport {\r\n    Paper,\r\n    Skeleton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst MatchesTable = ({\r\n    matches = [],\r\n    isFetching = false,\r\n    skeletonsAmount = 1,\r\n}) => {\r\n    // Creating skeletons\r\n    const skeletons = [];\r\n    for (let index = 0; index < skeletonsAmount; index++) {\r\n        skeletons.push(\r\n            <TableRow key={index}>\r\n                <TableCell>\r\n                    <Skeleton />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Skeleton />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Skeleton />\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <Skeleton />\r\n                </TableCell>\r\n                <TableCell align=\"center\">-</TableCell>\r\n                <TableCell>\r\n                    <Skeleton />\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <Skeleton />\r\n                </TableCell>\r\n            </TableRow>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper} elevation={3} sx={{ mb: \"30px\" }}>\r\n            <Table>\r\n                <TableBody>\r\n                    {isFetching\r\n                        ? skeletons\r\n                        : matches.map((m) => (\r\n                              <TableRow key={m.id}>\r\n                                  <TableCell>{m.date}</TableCell>\r\n                                  <TableCell>{m.time}</TableCell>\r\n                                  <TableCell>{m.status}</TableCell>\r\n                                  <TableCell align=\"right\">\r\n                                      {m.commandA}\r\n                                  </TableCell>\r\n                                  <TableCell align=\"center\">-</TableCell>\r\n                                  <TableCell>{m.commandB}</TableCell>\r\n                                  <TableCell align=\"right\">{m.score}</TableCell>\r\n                              </TableRow>\r\n                          ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nMatchesTable.propTypes = {\r\n    matches: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            date: PropTypes.string,\r\n            time: PropTypes.string,\r\n            status: PropTypes.string,\r\n            commandA: PropTypes.string,\r\n            commandB: PropTypes.string,\r\n            score: PropTypes.string,\r\n        })\r\n    ),\r\n    isFetching: PropTypes.bool,\r\n    skeletonsAmount: PropTypes.number,\r\n};\r\n\r\nexport default MatchesTable;\r\n","import PropTypes from \"prop-types\";\r\nimport { DatePicker } from \"@mui/lab\";\r\nimport { TextField, Typography, Pagination } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { add } from \"date-fns\";\r\nimport React from \"react\";\r\nimport MatchesTable from \"../ui/MatchesTable/MatchesTable\";\r\n\r\nconst MatchesData = ({\r\n    isFetching = false,\r\n    error,\r\n    matches = [],\r\n    currentMatches = [],\r\n    filters = {},\r\n    matchesPerPage,\r\n    currentPage = 1,\r\n    onPageChanged,\r\n    onFilterChanged,\r\n}) => {\r\n    const pageCount = Math.ceil(matches.length / matchesPerPage);\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ display: \"flex\", alignItems: \"center\", mb: \"30px\" }}>\r\n                <Typography sx={{ mr: \"20px\" }}>с</Typography>\r\n                <DatePicker\r\n                    label=\"Дата\"\r\n                    mask={\"__.__.____\"}\r\n                    value={filters.dateFrom}\r\n                    onChange={(value) => onFilterChanged(value, \"dateFrom\")}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} sx={{ mr: \"20px\" }} />\r\n                    )}\r\n                    maxDate={\r\n                        filters.dateTo &&\r\n                        add(new Date(filters.dateTo), { days: -1 })\r\n                    }\r\n                    minDate={\r\n                        filters.dateTo &&\r\n                        add(new Date(filters.dateTo), {\r\n                            years: -5,\r\n                            days: 1,\r\n                        })\r\n                    }\r\n                />\r\n                <Typography sx={{ mr: \"20px\" }}>по</Typography>\r\n                <DatePicker\r\n                    label=\"Дата\"\r\n                    mask={\"__.__.____\"}\r\n                    value={filters.dateTo}\r\n                    onChange={(value) => onFilterChanged(value, \"dateTo\")}\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    minDate={\r\n                        filters.dateFrom &&\r\n                        add(new Date(filters.dateFrom), { days: 1 })\r\n                    }\r\n                    maxDate={\r\n                        filters.dateFrom &&\r\n                        add(new Date(filters.dateFrom), {\r\n                            years: 5,\r\n                            days: -1,\r\n                        })\r\n                    }\r\n                />\r\n            </Box>\r\n            {error ? (\r\n                <Typography>Ошибка при получении данных</Typography>\r\n            ) : !matches.length && !isFetching ? (\r\n                <Typography>Данные не найдены</Typography>\r\n            ) : isFetching ? (\r\n                <MatchesTable isFetching skeletonsAmount={matchesPerPage} />\r\n            ) : (\r\n                <MatchesTable matches={currentMatches} />\r\n            )}\r\n            {matches.length > matchesPerPage && !error && !isFetching ? (\r\n                <Pagination\r\n                    onChange={onPageChanged}\r\n                    page={currentPage}\r\n                    count={pageCount}\r\n                    color=\"primary\"\r\n                    sx={{ display: \"flex\", justifyContent: \"center\" }}\r\n                />\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nMatchesData.propTypes = {\r\n    matches: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            date: PropTypes.string,\r\n            time: PropTypes.string,\r\n            status: PropTypes.string,\r\n            commandA: PropTypes.string,\r\n            commandB: PropTypes.string,\r\n            score: PropTypes.string,\r\n        })\r\n    ),\r\n    currentMatches: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            date: PropTypes.string,\r\n            time: PropTypes.string,\r\n            status: PropTypes.string,\r\n            commandA: PropTypes.string,\r\n            commandB: PropTypes.string,\r\n            score: PropTypes.string,\r\n        })\r\n    ),\r\n    filters: PropTypes.object,\r\n    matchesPerPage: PropTypes.number,\r\n    currentPage: PropTypes.number,\r\n    error: PropTypes.any,\r\n    isFetching: PropTypes.bool,\r\n    onPageChanged: PropTypes.func,\r\n    onFilterChanged: PropTypes.func,\r\n};\r\n\r\nexport default MatchesData;\r\n","import PropTypes from \"prop-types\";\r\nimport { format } from \"date-fns\";\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGetLeagueMatchesQuery } from \"../../api/leaguesApi\";\r\nimport { useGetTeamMatchesQuery } from \"../../api/teamsApi\";\r\nimport { formatMatchesData } from \"../../utils/match\";\r\nimport { getPaginatedArray } from \"../../utils/pagination\";\r\nimport MatchesTable from \"../components/MatchesData\";\r\n\r\nconst MatchesTableContainer = ({\r\n    queryHookType = \"leagues\",\r\n    matchesPerPage,\r\n    ...rest\r\n}) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [filters, setFilters] = useState({\r\n        dateFrom: null,\r\n        dateTo: null,\r\n    });\r\n    const { leagueId, teamId } = useParams();\r\n\r\n    const getQueryHook = () => {\r\n        if (queryHookType === \"leagues\") return useGetLeagueMatchesQuery;\r\n        if (queryHookType === \"team\") return useGetTeamMatchesQuery;\r\n    };\r\n\r\n    // Creating params for api request\r\n    const getQueryParams = () => {\r\n        const params = {};\r\n        if (queryHookType === \"leagues\") params.id = leagueId;\r\n        if (queryHookType === \"team\") params.id = teamId;\r\n        if (filters.dateFrom && filters.dateTo) {\r\n            params.dateFrom = format(filters.dateFrom, \"yyyy-MM-dd\");\r\n            params.dateTo = format(filters.dateTo, \"yyyy-MM-dd\");\r\n        }\r\n        return params;\r\n    };\r\n\r\n    // Fetching api data\r\n    const {\r\n        matches = [],\r\n        error,\r\n        isFetching,\r\n    } = getQueryHook()(getQueryParams(), {\r\n        selectFromResult: ({ data, ...rest }) => ({\r\n            ...rest,\r\n            matches: formatMatchesData(data?.matches),\r\n        }),\r\n    });\r\n\r\n    const currentMatches = getPaginatedArray(\r\n        matches,\r\n        matchesPerPage,\r\n        currentPage\r\n    );\r\n\r\n    const onPageChanged = (e, page) => setCurrentPage(page);\r\n\r\n    const onFilterChanged = (value, filterName) => {\r\n        const newFilters = { ...filters, [filterName]: value };\r\n        setFilters(newFilters);\r\n        if (newFilters.dateFrom && newFilters.dateTo) setCurrentPage(1);\r\n    };\r\n\r\n    return (\r\n        <MatchesTable\r\n            error={error}\r\n            isFetching={isFetching}\r\n            matches={matches}\r\n            currentMatches={currentMatches}\r\n            matchesPerPage={matchesPerPage}\r\n            filters={filters}\r\n            currentPage={currentPage}\r\n            onPageChanged={onPageChanged}\r\n            onFilterChanged={onFilterChanged}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nMatchesTableContainer.propTypes = {\r\n    queryHookType: PropTypes.string,\r\n    matchesPerPage: PropTypes.number,\r\n};\r\n\r\nexport default MatchesTableContainer;\r\n","import PropTypes from \"prop-types\";\r\nimport {\r\n    Breadcrumbs as BreadcrumbsMui,\r\n    Link,\r\n    Skeleton,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Breadcrumbs = ({ crumbs = [] }) => {\r\n    return (\r\n        <BreadcrumbsMui aria-label=\"breadcrumb\">\r\n            {crumbs.map((c, index) =>\r\n                c.isLoading ? (\r\n                    <Skeleton sx={{ width: \"100px\" }} key={c.href} />\r\n                ) : crumbs.length - 1 === index ? (\r\n                    <Typography color=\"text.primary\" key={c.href}>\r\n                        {c.name}\r\n                    </Typography>\r\n                ) : (\r\n                    <Link\r\n                        key={c.href}\r\n                        underline=\"hover\"\r\n                        color=\"inherit\"\r\n                        component={NavLink}\r\n                        to={c.href}\r\n                    >\r\n                        {c.name}\r\n                    </Link>\r\n                )\r\n            )}\r\n        </BreadcrumbsMui>\r\n    );\r\n};\r\n\r\nBreadcrumbs.propTypes = {\r\n    crumbs: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            href: PropTypes.string.isRequired,\r\n            isLoading: PropTypes.bool,\r\n        })\r\n    ).isRequired,\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import { Container, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGetLeagueMatchesQuery } from \"../../api/leaguesApi\";\r\nimport MatchesDataContainer from \"../../common/containers/MatchesDataContainer\";\r\nimport Breadcrumbs from \"../../common/ui/Breadcrumbs/Breadcrumbs\";\r\n\r\nconst LeagueCalendar = () => {\r\n    const { leagueId } = useParams();\r\n    const { data, error, isLoading } = useGetLeagueMatchesQuery({\r\n        id: leagueId,\r\n    });\r\n\r\n    const crumbs = [\r\n        { name: \"Лиги\", href: \"/leagues\" },\r\n        {\r\n            name: error ? \"\" : data?.competition.name,\r\n            href: `/leagues/${leagueId}/league-calendar`,\r\n            isLoading,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Breadcrumbs crumbs={crumbs} sx={{ mb: \"30px\" }} />\r\n\r\n            <Typography variant=\"h3\" component=\"div\" sx={{ mb: \"20px\" }}>\r\n                Матчи\r\n            </Typography>\r\n\r\n            <MatchesDataContainer matchesPerPage={7} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LeagueCalendar;\r\n","export const getPaginatedArray = (arr = [], itemsPerPage = 10, currentPage = 1) => {\r\n    const offset = (currentPage - 1) * itemsPerPage;\r\n    const paginatedItems = arr.slice(offset, offset + itemsPerPage);\r\n\r\n    return paginatedItems;\r\n};\r\n"],"names":["getLocaledMatchStatus","status","locale","getFormattedMatchScore","fullTime","extraTime","penalties","score","homeTeam","awayTeam","formatMatchesData","matches","map","m","id","date","format","Date","utcDate","time","commandA","name","commandB","isFetching","skeletonsAmount","skeletons","index","push","TableRow","TableCell","Skeleton","align","TableContainer","component","Paper","elevation","sx","mb","Table","TableBody","error","currentMatches","filters","matchesPerPage","currentPage","onPageChanged","onFilterChanged","pageCount","Math","ceil","length","Box","display","alignItems","Typography","mr","DatePicker","label","mask","value","dateFrom","onChange","renderInput","params","TextField","maxDate","dateTo","add","days","minDate","years","Pagination","page","count","color","justifyContent","queryHookType","rest","useState","setCurrentPage","setFilters","useParams","leagueId","teamId","useGetLeagueMatchesQuery","useGetTeamMatchesQuery","getQueryParams","selectFromResult","data","getPaginatedArray","e","filterName","newFilters","crumbs","c","isLoading","width","href","underline","NavLink","to","competition","maxWidth","variant","arr","itemsPerPage","offset","paginatedItems","slice"],"sourceRoot":""}